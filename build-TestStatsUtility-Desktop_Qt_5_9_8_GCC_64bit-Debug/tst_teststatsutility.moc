/****************************************************************************
** Meta object code from reading C++ file 'tst_teststatsutility.cpp'
**
** Created by: The Qt Meta Object Compiler version 67 (Qt 5.9.8)
**
** WARNING! All changes made in this file will be lost!
*****************************************************************************/

#include <QtCore/qbytearray.h>
#include <QtCore/qmetatype.h>
#if !defined(Q_MOC_OUTPUT_REVISION)
#error "The header file 'tst_teststatsutility.cpp' doesn't include <QObject>."
#elif Q_MOC_OUTPUT_REVISION != 67
#error "This file was generated using the moc from 5.9.8. It"
#error "cannot be used with the include files from this version of Qt."
#error "(The moc has changed too much.)"
#endif

QT_BEGIN_MOC_NAMESPACE
QT_WARNING_PUSH
QT_WARNING_DISABLE_DEPRECATED
struct qt_meta_stringdata_TestStatsUtility_t {
    QByteArrayData data[16];
    char stringdata0[430];
};
#define QT_MOC_LITERAL(idx, ofs, len) \
    Q_STATIC_BYTE_ARRAY_DATA_HEADER_INITIALIZER_WITH_OFFSET(len, \
    qptrdiff(offsetof(qt_meta_stringdata_TestStatsUtility_t, stringdata0) + ofs \
        - idx * sizeof(QByteArrayData)) \
    )
static const qt_meta_stringdata_TestStatsUtility_t qt_meta_stringdata_TestStatsUtility = {
    {
QT_MOC_LITERAL(0, 0, 16), // "TestStatsUtility"
QT_MOC_LITERAL(1, 17, 21), // "testToMinutesPositive"
QT_MOC_LITERAL(2, 39, 0), // ""
QT_MOC_LITERAL(3, 40, 21), // "testToMinutesNegative"
QT_MOC_LITERAL(4, 62, 19), // "testToHoursPositive"
QT_MOC_LITERAL(5, 82, 19), // "testToHoursNegative"
QT_MOC_LITERAL(6, 102, 18), // "testToDaysPositive"
QT_MOC_LITERAL(7, 121, 18), // "testToDaysNegative"
QT_MOC_LITERAL(8, 140, 19), // "testToWeeksPositive"
QT_MOC_LITERAL(9, 160, 19), // "testToWeeksNegative"
QT_MOC_LITERAL(10, 180, 20), // "testToMonthsPositive"
QT_MOC_LITERAL(11, 201, 20), // "testToMonthsNegative"
QT_MOC_LITERAL(12, 222, 40), // "calculateProductivePercentage..."
QT_MOC_LITERAL(13, 263, 62), // "calculateProductivePercentage..."
QT_MOC_LITERAL(14, 326, 62), // "calculateProductivePercentage..."
QT_MOC_LITERAL(15, 389, 40) // "calculateProductivePercentage..."

    },
    "TestStatsUtility\0testToMinutesPositive\0"
    "\0testToMinutesNegative\0testToHoursPositive\0"
    "testToHoursNegative\0testToDaysPositive\0"
    "testToDaysNegative\0testToWeeksPositive\0"
    "testToWeeksNegative\0testToMonthsPositive\0"
    "testToMonthsNegative\0"
    "calculateProductivePercentageAllNegative\0"
    "calculateProductivePercentageNegativeSecondsPositiveProductive\0"
    "calculateProductivePercentagePositiveSecondsNegativeProductive\0"
    "calculateProductivePercentageAllPositive"
};
#undef QT_MOC_LITERAL

static const uint qt_meta_data_TestStatsUtility[] = {

 // content:
       7,       // revision
       0,       // classname
       0,    0, // classinfo
      14,   14, // methods
       0,    0, // properties
       0,    0, // enums/sets
       0,    0, // constructors
       0,       // flags
       0,       // signalCount

 // slots: name, argc, parameters, tag, flags
       1,    0,   84,    2, 0x08 /* Private */,
       3,    0,   85,    2, 0x08 /* Private */,
       4,    0,   86,    2, 0x08 /* Private */,
       5,    0,   87,    2, 0x08 /* Private */,
       6,    0,   88,    2, 0x08 /* Private */,
       7,    0,   89,    2, 0x08 /* Private */,
       8,    0,   90,    2, 0x08 /* Private */,
       9,    0,   91,    2, 0x08 /* Private */,
      10,    0,   92,    2, 0x08 /* Private */,
      11,    0,   93,    2, 0x08 /* Private */,
      12,    0,   94,    2, 0x08 /* Private */,
      13,    0,   95,    2, 0x08 /* Private */,
      14,    0,   96,    2, 0x08 /* Private */,
      15,    0,   97,    2, 0x08 /* Private */,

 // slots: parameters
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,
    QMetaType::Void,

       0        // eod
};

void TestStatsUtility::qt_static_metacall(QObject *_o, QMetaObject::Call _c, int _id, void **_a)
{
    if (_c == QMetaObject::InvokeMetaMethod) {
        TestStatsUtility *_t = static_cast<TestStatsUtility *>(_o);
        Q_UNUSED(_t)
        switch (_id) {
        case 0: _t->testToMinutesPositive(); break;
        case 1: _t->testToMinutesNegative(); break;
        case 2: _t->testToHoursPositive(); break;
        case 3: _t->testToHoursNegative(); break;
        case 4: _t->testToDaysPositive(); break;
        case 5: _t->testToDaysNegative(); break;
        case 6: _t->testToWeeksPositive(); break;
        case 7: _t->testToWeeksNegative(); break;
        case 8: _t->testToMonthsPositive(); break;
        case 9: _t->testToMonthsNegative(); break;
        case 10: _t->calculateProductivePercentageAllNegative(); break;
        case 11: _t->calculateProductivePercentageNegativeSecondsPositiveProductive(); break;
        case 12: _t->calculateProductivePercentagePositiveSecondsNegativeProductive(); break;
        case 13: _t->calculateProductivePercentageAllPositive(); break;
        default: ;
        }
    }
    Q_UNUSED(_a);
}

const QMetaObject TestStatsUtility::staticMetaObject = {
    { &QObject::staticMetaObject, qt_meta_stringdata_TestStatsUtility.data,
      qt_meta_data_TestStatsUtility,  qt_static_metacall, nullptr, nullptr}
};


const QMetaObject *TestStatsUtility::metaObject() const
{
    return QObject::d_ptr->metaObject ? QObject::d_ptr->dynamicMetaObject() : &staticMetaObject;
}

void *TestStatsUtility::qt_metacast(const char *_clname)
{
    if (!_clname) return nullptr;
    if (!strcmp(_clname, qt_meta_stringdata_TestStatsUtility.stringdata0))
        return static_cast<void*>(this);
    return QObject::qt_metacast(_clname);
}

int TestStatsUtility::qt_metacall(QMetaObject::Call _c, int _id, void **_a)
{
    _id = QObject::qt_metacall(_c, _id, _a);
    if (_id < 0)
        return _id;
    if (_c == QMetaObject::InvokeMetaMethod) {
        if (_id < 14)
            qt_static_metacall(this, _c, _id, _a);
        _id -= 14;
    } else if (_c == QMetaObject::RegisterMethodArgumentMetaType) {
        if (_id < 14)
            *reinterpret_cast<int*>(_a[0]) = -1;
        _id -= 14;
    }
    return _id;
}
QT_WARNING_POP
QT_END_MOC_NAMESPACE
